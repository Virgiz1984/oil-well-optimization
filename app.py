import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏—è —Å–∫–≤–∞–∂–∏–Ω",
    page_icon="üõ¢Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üõ¢Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω")
st.markdown("---")

# –§—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ Jupyter notebook)
def optimize_interval(
    df, 
    well_name,
    mu_o=0.43,  # –≤—è–∑–∫–æ—Å—Ç—å –Ω–µ—Ñ—Ç–∏, –ü–∞¬∑—Å
    mu_w=0.33,  # –≤—è–∑–∫–æ—Å—Ç—å –≤–æ–¥—ã, –ü–∞¬∑—Å
    P_res=30 * 1.013e5,  # –ø–ª–∞—Å—Ç–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –ü–∞
    P_well=20 * 1.013e5, # –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—å–µ, –ü–∞
    r_w=0.1,             # —Ä–∞–¥–∏—É—Å —Å–∫–≤–∞–∂–∏–Ω—ã, –º
    r_e=500,             # —Ä–∞–¥–∏—É—Å –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –º
    h=0.1,               # —Ç–æ–ª—â–∏–Ω–∞ –ø–ª–∞—Å—Ç–∞, –º
    Soi=0.28,            # –æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –Ω–µ—Ñ—Ç–µ—ë–º–∫–æ—Å—Ç—å
    B=1.2,               # –æ–±—ä–µ–º–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    prise_oil=15000,     # —Ü–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏, —Ä—É–±/–º3
    prise_w=800,         # —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥—ã, —Ä—É–±/–º3
    opex_liquid=250,     # OPEX –Ω–∞ –∂–∏–¥–∫–æ—Å—Ç—å, —Ä—É–±/–º3
    ndpi_rate=0.01,      # –ù–î–ü–ò –æ—Ç –≤—ã—Ä—É—á–∫–∏
    reculc=902007.49,      # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    window_sizes_min_m=4,
    window_sizes_max_m=35,
    progress_callback=None  # callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
):
    """
    –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ø–æ –ø—Ä–∏–±—ã–ª–∏
    """
    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–≤–∞–∂–∏–Ω–µ
    well = df[df.well == well_name].copy().reset_index(drop=True)

    # —Ñ–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç–∏)
    well['k_ro'] = well['fill_cb_res'] * (1 - well['KVS_fin']) - Soi
    well['k_ro'] = np.clip(well['k_ro'], 0, 1)
    k_ro = well['k_ro']
    kv = 1 - well['fill_cb_res'] * (1 - well['KVS_fin'])
    k_rw = kv - well['KVS_fin']
    k_rw = np.clip(k_rw, 0, 1)

    well['f_o'] = (k_ro / mu_o) / (k_ro / mu_o + k_rw / mu_w)
    # –§–æ—Ä–º—É–ª–∞ –î–∞—Ä—Å–∏ –¥–ª—è —Ä–∞–¥–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ–∫–∞: Q = (2œÄ*k*h*ŒîP) / (Œº*B*ln(re/rw))
    # –î–ª—è –º–Ω–æ–≥–æ—Ñ–∞–∑–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    well['Q_total'] = (
        (2 * np.pi * well["KPR_cb"] * h * (P_res - P_well)) /
        (B * np.log(r_e / r_w))
    ) * (k_ro / mu_o + k_rw / mu_w)
    well['Q_oil'] = well['Q_total'] * well['f_o']
    well['Q_wat'] = well['Q_total'] * (1 - well['f_o'])

    # –ø–µ—Ä–µ–≤–æ–¥ –º–µ—Ç—Ä–æ–≤ –≤ —Ç–æ—á–∫–∏ (—à–∞–≥ 0.1 –º ‚Üí —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10)
    window_sizes_min = window_sizes_min_m * 10
    window_sizes_max = window_sizes_max_m * 10

    best_window = None
    best_start = None
    best_metric = -np.inf
    best_result = {}
    
    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    total_windows = window_sizes_max - window_sizes_min + 1
    completed_windows = 0

    for window in range(window_sizes_min, window_sizes_max + 1):
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if progress_callback is not None:
            progress = completed_windows / total_windows
            progress_callback(progress, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–Ω–∞ {window/10:.1f}–º ({completed_windows+1}/{total_windows})")
        for start in range(0, len(well) - window + 1):
            end = start + window
            df_window = well.iloc[start:end]

            # –≤—ã—Ä—É—á–∫–∞
            revenue = prise_oil * df_window['Q_oil'].sum() / reculc
            # –Ω–∞–ª–æ–≥
            ndpi = ndpi_rate * revenue
            # –∑–∞—Ç—Ä–∞—Ç—ã (–≤–æ–¥–∞ + –ø–æ–¥—ä—ë–º –∂–∏–¥–∫–æ—Å—Ç–∏)
            costs = (
                prise_w * df_window['Q_wat'].sum() / reculc +
                opex_liquid * df_window['Q_total'].sum() / reculc
            )
            # —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
            profit = revenue - ndpi - costs

            if profit > best_metric:
                best_metric = profit
                best_window = window
                best_start = start
                Q_oil_total = df_window['Q_oil'].sum() / reculc
                Q_wat_total = df_window['Q_wat'].sum() / reculc
                water_cut = Q_wat_total / (Q_oil_total + Q_wat_total) if (Q_oil_total + Q_wat_total) > 0 else 0
                
                best_result = {
                    'revenue': revenue,
                    'ndpi': ndpi,
                    'costs': costs,
                    'profit': profit,
                    'Q_oil': Q_oil_total,
                    'Q_wat': Q_wat_total,
                    'water_cut': water_cut,
                    'depth_start': df_window.iloc[0]['DEPTH'],
                    'depth_end': df_window.iloc[-1]['DEPTH'],
                    'window_m': window / 10
                }
        
        completed_windows += 1
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    if progress_callback is not None:
        progress_callback(1.0, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")

    return best_result

def optimize_interval_with_loss(
    df, well_name,
    mu_o=0.43, mu_w=0.33,
    P_res=30*1.013e5, P_well=20*1.013e5,
    r_w=0.1, r_e=500, h=0.1, Soi=0.28, B=1.2,
    prise_oil=15000, prise_w=800, opex_liquid=250, ndpi_rate=0.01,
    window_sizes_min_m=4, window_sizes_max_m=35,
    fact_start_depth=None, fact_end_depth=None,
    fact_q=None, fact_wc=None, fact_time=None,
    progress_callback=None  # callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
):
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏.
    """
    well = df[df.well == well_name].reset_index(drop=True)

    # --- —Ä–∞—Å—á—ë—Ç —Ñ–∞–∑–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ ---
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç–∏ (–±–µ–∑ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –≤—è–∑–∫–æ—Å—Ç—å)
    well['k_ro'] = well['fill_cb_res'] * (1 - well['KVS_fin']) - Soi
    well['k_ro'] = np.clip(well['k_ro'], 0, 1)
    k_ro = well['k_ro']
    kv = 1 - well['fill_cb_res'] * (1 - well['KVS_fin'])
    k_rw = kv - well['KVS_fin']
    k_rw = np.clip(k_rw, 0, 1)
    
    well['f_o'] = (k_ro / mu_o) / (k_ro / mu_o + k_rw / mu_w)
    # –§–æ—Ä–º—É–ª–∞ –î–∞—Ä—Å–∏ –¥–ª—è —Ä–∞–¥–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ–∫–∞
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    well['Q_total'] = ((2 * np.pi * well["KPR_cb"] * h * (P_res - P_well)) / (B * np.log(r_e / r_w))) * (k_ro / mu_o + k_rw / mu_w)
    well['Q_oil'] = well['Q_total'] * well['f_o']
    well['Q_wat'] = well['Q_total'] * (1 - well['f_o'])

    # --- 1. –ü–æ–¥–≥–æ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ---
    if fact_start_depth is not None and fact_end_depth is not None and fact_q is not None and fact_wc is not None:
        fact_window = well[(well['DEPTH'] >= fact_start_depth) & (well['DEPTH'] <= fact_end_depth)]
        if len(fact_window) == 0:
            raise ValueError("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –æ–±—â–µ–≥–æ –¥–µ–±–∏—Ç–∞
        model_q = fact_window['Q_oil'].sum() + fact_window['Q_wat'].sum()
        reculc = model_q / fact_q if fact_q > 0 else 1.0
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
        model_q_oil = fact_window['Q_oil'].sum() / reculc
        model_q_wat = fact_window['Q_wat'].sum() / reculc
        model_wc = model_q_wat / (model_q_oil + model_q_wat) if (model_q_oil + model_q_wat) > 0 else 0
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è –Ω–µ—Ñ—Ç–∏ –∏ –≤–æ–¥—ã
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≤—ã—à–∞–µ—Ç –æ–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å, oil_correction > 1, wat_correction < 1
        fact_q_oil_real = fact_q * (1 - fact_wc)
        fact_q_wat_real = fact_q * fact_wc
        
        oil_correction = fact_q_oil_real / model_q_oil if model_q_oil > 0 else 1.0
        wat_correction = fact_q_wat_real / model_q_wat if model_q_wat > 0 else 1.0
    else:
        reculc = 1.0
        oil_correction = 1.0
        wat_correction = 1.0

    # --- 2. –ü—Ä–∏–±—ã–ª—å –ø–æ —Ñ–∞–∫—Ç—É ---
    if fact_q is not None and fact_wc is not None and fact_time is not None:
        fact_q_oil = fact_q * (1 - fact_wc)
        fact_q_wat = fact_q * fact_wc
        # –†–∞—Å—á—ë—Ç –ò–î–ï–ù–¢–ò–ß–ù–´–ô –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É: –≤—ã—Ä—É—á–∫–∞ - –ù–î–ü–ò - –∑–∞—Ç—Ä–∞—Ç—ã
        fact_revenue = prise_oil * fact_q_oil * fact_time
        fact_ndpi = ndpi_rate * fact_revenue
        fact_costs = prise_w * fact_q_wat * fact_time + opex_liquid * fact_q * fact_time
        fact_profit = fact_revenue - fact_ndpi - fact_costs
    else:
        fact_profit = None

    # --- 3. –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ë–ï–ó –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ —Ñ–∞–∑–∞–º!) ---
    window_sizes = range(window_sizes_min_m*10, window_sizes_max_m*10)
    best = {"profit": -np.inf}
    
    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    total_windows = len(window_sizes)
    completed_windows = 0

    for window in window_sizes:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if progress_callback is not None:
            progress = completed_windows / total_windows
            progress_callback(progress, f"–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å: –æ–∫–Ω–æ {window/10:.1f}–º ({completed_windows+1}/{total_windows})")
        for start in range(0, len(well) - window + 1):
            end = start + window
            df_window = well.iloc[start:end]

            # –ú–æ–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–±—â–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ reculc)
            Q_oil_sum = df_window['Q_oil'].sum() / reculc
            Q_wat_sum = df_window['Q_wat'].sum() / reculc
            Q_total_sum = df_window['Q_total'].sum() / reculc
            
            # –†–∞—Å—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ fact_time
            revenue = prise_oil * Q_oil_sum * fact_time
            ndpi = ndpi_rate * revenue
            costs = prise_w * Q_wat_sum * fact_time + opex_liquid * Q_total_sum * fact_time
            profit = revenue - ndpi - costs

            if profit > best["profit"]:
                best = {
                    "profit": profit,
                    "revenue": revenue,
                    "ndpi": ndpi,
                    "costs": costs,
                    "window": window,
                    "start": start,
                    "end": end,
                    "Q_oil_sum": Q_oil_sum,
                    "Q_wat_sum": Q_wat_sum,
                    "Q_total_sum": Q_total_sum,
                    "start_depth": df_window.iloc[0]['DEPTH'],
                    "end_depth": df_window.iloc[-1]['DEPTH']
                }
        
        completed_windows += 1
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    if progress_callback is not None:
        progress_callback(1.0, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # --- 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –ø–æ —Ñ–∞–∑–∞–º –¢–û–õ–¨–ö–û –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –æ–ø—Ç–∏–º—É–º—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
    best["Q_oil_corrected"] = best["Q_oil_sum"] * oil_correction
    best["Q_wat_corrected"] = best["Q_wat_sum"] * wat_correction
    best["Q_total_corrected"] = best["Q_oil_corrected"] + best["Q_wat_corrected"]
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏–∫—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ–±–∏—Ç–∞–º–∏
    best["revenue_corrected"] = prise_oil * best["Q_oil_corrected"] * fact_time
    best["ndpi_corrected"] = ndpi_rate * best["revenue_corrected"]
    best["costs_corrected"] = prise_w * best["Q_wat_corrected"] * fact_time + opex_liquid * best["Q_total_corrected"] * fact_time
    best["profit_corrected"] = best["revenue_corrected"] - best["ndpi_corrected"] - best["costs_corrected"]

    # --- 5. –°—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!) ---
    if fact_profit is not None:
        loss = best["profit_corrected"] - fact_profit
    else:
        loss = None

    return {
        "fact_profit": fact_profit,
        # –î–ª—è –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        "optimal_profit": best["profit_corrected"],
        "optimal_revenue": best["revenue_corrected"],
        "optimal_ndpi": best["ndpi_corrected"],
        "optimal_costs": best["costs_corrected"],
        "loss": loss,
        "optimal_interval": (best["start_depth"], best["end_depth"]),
        "optimal_window_m": best["window"]/10,
        "optimal_Q_oil": best["Q_oil_corrected"],
        "optimal_Q_wat": best["Q_wat_corrected"],
        "reculc": reculc,
        "oil_correction": oil_correction,
        "wat_correction": wat_correction
    }

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
uploaded_file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫–≤–∞–∂–∏–Ω",
    type=['xlsx', 'xls'],
    help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: well, DEPTH, fill_cb_res, KVS_fin, KPR_cb"
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã
st.sidebar.subheader("üõ¢Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã")
# well_name –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

# –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("üî¨ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
mu_o = st.sidebar.slider("–í—è–∑–∫–æ—Å—Ç—å –Ω–µ—Ñ—Ç–∏ (–ü–∞¬∑—Å)", 0.1, 1.0, 0.43, 0.01)
mu_w = st.sidebar.slider("–í—è–∑–∫–æ—Å—Ç—å –≤–æ–¥—ã (–ü–∞¬∑—Å)", 0.1, 1.0, 0.33, 0.01)
P_res = st.sidebar.slider("–ü–ª–∞—Å—Ç–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–∞—Ç–º)", 10, 50, 30, 1) * 1.013e5
P_well = st.sidebar.slider("–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—å–µ (–∞—Ç–º)", 5, 30, 20, 1) * 1.013e5
r_w = st.sidebar.slider("–†–∞–¥–∏—É—Å —Å–∫–≤–∞–∂–∏–Ω—ã (–º)", 0.05, 0.2, 0.1, 0.01)
r_e = st.sidebar.slider("–†–∞–¥–∏—É—Å –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–º)", 100, 1000, 500, 10)
h = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ –ø–ª–∞—Å—Ç–∞ (–º)", 0.05, 0.5, 0.1, 0.01)
Soi = st.sidebar.slider("–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –Ω–µ—Ñ—Ç–µ—ë–º–∫–æ—Å—Ç—å", 0.1, 0.5, 0.28, 0.01)
B = st.sidebar.slider("–û–±—ä–µ–º–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", 1.0, 2.0, 1.2, 0.1)

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
prise_oil = st.sidebar.number_input("–¶–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏ (—Ä—É–±/–º¬≥)", 5000, 50000, 15000, 500)
prise_w = st.sidebar.number_input("–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥—ã (—Ä—É–±/–º¬≥)", 100, 2000, 800, 50)
opex_liquid = st.sidebar.number_input("OPEX –Ω–∞ –∂–∏–¥–∫–æ—Å—Ç—å (—Ä—É–±/–º¬≥)", 50, 1000, 250, 25)
ndpi_rate = st.sidebar.slider("–ù–î–ü–ò –æ—Ç –≤—ã—Ä—É—á–∫–∏", 0.0, 0.1, 0.01, 0.001)
reculc = st.sidebar.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞", 100000.0, 5000000.0, 902007.49, 1000.0, format="%.2f")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞
st.sidebar.subheader("üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞")
window_min = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–∫–Ω–∞ (–º)", 1, 20, 4, 1)
window_max = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–∫–Ω–∞ (–º)", 10, 50, 35, 1)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
st.sidebar.subheader("üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ—Ä—å)")
st.sidebar.info("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –†–ï–ê–õ–¨–ù–´–ï –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è. –ù–µ –º–µ–Ω—è–π—Ç–µ –∏—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
fact_start_depth = st.sidebar.number_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞ –Ω–∞—á–∞–ª–∞ (–º)", 0, 5000, 2828, 1)
fact_end_depth = st.sidebar.number_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞ –∫–æ–Ω—Ü–∞ (–º)", 0, 5000, 2848, 1)
fact_q = st.sidebar.number_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–±–∏—Ç (–º¬≥/—Å—É—Ç)", 0.0, 1000.0, 20.0, 0.1)
fact_wc = st.sidebar.slider("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.7, 0.01, 
                             help="–ò–ó–ú–ï–†–ï–ù–ù–ê–Ø –æ–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å –∏–∑ –∏—Å–ø—ã—Ç–∞–Ω–∏—è. –ù–µ –º–µ–Ω—è–π—Ç–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
fact_time = st.sidebar.number_input("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫–≤–∞–∂–∏–Ω—ã (—Å—É—Ç–∫–∏)", 1, 3650, 365, 1)

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
st.sidebar.markdown("---")
calculate_button = st.sidebar.button("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", type="primary", use_container_width=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if uploaded_file is not None:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(uploaded_file)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['well', 'DEPTH', 'fill_cb_res', 'KVS_fin', 'KPR_cb']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            st.info("–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: well, DEPTH, fill_cb_res, KVS_fin, KPR_cb")
        else:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω
            available_wells = df['well'].unique()
            
            # –í—ã–±–æ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
            st.sidebar.subheader("üõ¢Ô∏è –í—ã–±–æ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã")
            well_name = st.sidebar.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                options=available_wells,
                index=0 if len(available_wells) > 0 else None,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )
            
            if well_name:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω–µ
                st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω–∞: **{well_name}**")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∫–≤–∞–∂–∏–Ω–µ
                well_data = df[df.well == well_name]
                st.info(f"üìä –î–∞–Ω–Ω—ã–µ —Å–∫–≤–∞–∂–∏–Ω—ã: {len(well_data)} —Ç–æ—á–µ–∫, –≥–ª—É–±–∏–Ω–∞ –æ—Ç {well_data['DEPTH'].min():.1f} –¥–æ {well_data['DEPTH'].max():.1f} –º")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if 'results' not in st.session_state:
                    st.session_state.results = None
                if 'results_loss' not in st.session_state:
                    st.session_state.results_loss = None
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
                if calculate_button:
                    # –°–æ–∑–¥–∞—ë–º placeholder –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    progress_placeholder = st.empty()
                    status_placeholder = st.empty()
                    
                    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_bar = progress_placeholder.progress(0)
                    
                    # Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    def update_progress(progress, status_text):
                        progress_bar.progress(progress)
                        status_placeholder.text(status_text)
                    
                    try:
                        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                        update_progress(0.0, "üîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞...")
                        st.session_state.results = optimize_interval(
                            df, well_name,
                            mu_o=mu_o, mu_w=mu_w,
                            P_res=P_res, P_well=P_well,
                            r_w=r_w, r_e=r_e, h=h, Soi=Soi, B=B,
                            prise_oil=prise_oil, prise_w=prise_w,
                            opex_liquid=opex_liquid, ndpi_rate=ndpi_rate,
                            reculc=reculc,
                            window_sizes_min_m=window_min,
                            window_sizes_max_m=window_max,
                            progress_callback=update_progress
                        )
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å
                        update_progress(0.0, "üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ—Ä—å...")
                        st.session_state.results_loss = optimize_interval_with_loss(
                            df, well_name,
                            mu_o=mu_o, mu_w=mu_w,
                            P_res=P_res, P_well=P_well,
                            r_w=r_w, r_e=r_e, h=h, Soi=Soi, B=B,
                            prise_oil=prise_oil, prise_w=prise_w,
                            opex_liquid=opex_liquid, ndpi_rate=ndpi_rate,
                            window_sizes_min_m=window_min, window_sizes_max_m=window_max,
                            fact_start_depth=fact_start_depth, fact_end_depth=fact_end_depth,
                            fact_q=fact_q, fact_wc=fact_wc, fact_time=fact_time,
                            progress_callback=update_progress
                        )
                        
                        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                        progress_placeholder.empty()
                        status_placeholder.empty()
                        st.success("‚úÖ –ü–µ—Ä–µ—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                        
                    except Exception as e:
                        progress_placeholder.empty()
                        status_placeholder.empty()
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {str(e)}")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
                tab1, tab2 = st.tabs(["üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", "üí∞ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å"])
                
                with tab1:
                    st.header("üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è")
                    st.markdown("–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if st.session_state.results is None:
                        st.warning("‚ö†Ô∏è –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å'** –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                    else:
                        result = st.session_state.results
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.success("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric(
                                "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å",
                                f"{result['profit']:,.0f} —Ä—É–±",
                                delta=None
                            )
                        
                        with col2:
                            st.metric(
                                "–î–æ–±—ã—á–∞ –Ω–µ—Ñ—Ç–∏",
                                f"{result['Q_oil']:.2f} –º¬≥",
                                delta=None
                            )
                        
                        with col3:
                            st.metric(
                                "–î–æ–±—ã—á–∞ –≤–æ–¥—ã",
                                f"{result['Q_wat']:.2f} –º¬≥",
                                delta=None
                            )
                        
                        with col4:
                            st.metric(
                                "–î–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞",
                                f"{result['window_m']:.1f} –º",
                                delta=None
                            )
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
                            st.write(f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {result['revenue']:,.2f} —Ä—É–±")
                            st.write(f"‚Ä¢ –ù–î–ü–ò: {result['ndpi']:,.2f} —Ä—É–±")
                            st.write(f"‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã: {result['costs']:,.2f} —Ä—É–±")
                            st.write(f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {result['profit']:,.2f} —Ä—É–±")
                        
                        with col2:
                            st.markdown("**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
                            st.write(f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –Ω–∞—á–∞–ª–∞: {result['depth_start']:.1f} –º")
                            st.write(f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –∫–æ–Ω—Ü–∞: {result['depth_end']:.1f} –º")
                            st.write(f"‚Ä¢ –î–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {result['window_m']:.1f} –º")
                            st.write(f"‚Ä¢ –î–æ–±—ã—á–∞ –Ω–µ—Ñ—Ç–∏: {result['Q_oil']:.2f} –º¬≥")
                            st.write(f"‚Ä¢ –î–æ–±—ã—á–∞ –≤–æ–¥—ã: {result['Q_wat']:.2f} –º¬≥")
                            st.write(f"‚Ä¢ –û–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å: {result['water_cut']:.1%}")
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                        st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                        
                        # ========================================
                        # –ü–û–î–ì–û–¢–û–í–ö–ê –ï–î–ò–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê –î–õ–Ø –í–°–ï–• –ì–†–ê–§–ò–ö–û–í
                        # ========================================
                        
                        # –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—ã–π DataFrame –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                        plot_data = well_data.copy().reset_index(drop=True)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
                        required_cols = ['DEPTH', 'fill_cb_res', 'KVS_fin', 'KPR_cb']
                        plot_data = plot_data.dropna(subset=required_cols)
                        
                        # –†–∞—Å—á—ë—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç–µ–π
                        plot_data['k_ro'] = plot_data['fill_cb_res'] * (1 - plot_data['KVS_fin']) - Soi
                        plot_data['k_ro'] = np.clip(plot_data['k_ro'], 0, 1)
                        
                        plot_data['kv'] = 1 - plot_data['fill_cb_res'] * (1 - plot_data['KVS_fin'])
                        plot_data['k_rw'] = plot_data['kv'] - plot_data['KVS_fin']
                        plot_data['k_rw'] = np.clip(plot_data['k_rw'], 0, 1)
                        
                        # –†–∞—Å—á—ë—Ç –¥–æ–ª–∏ –Ω–µ—Ñ—Ç–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—è–∑–∫–æ—Å—Ç–∏ —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å inf
                        mu_o_safe = max(mu_o, 1e-6)
                        mu_w_safe = max(mu_w, 1e-6)
                        
                        mobility_oil = plot_data['k_ro'] / mu_o_safe
                        mobility_wat = plot_data['k_rw'] / mu_w_safe
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å inf
                        mobility_oil = np.clip(mobility_oil, 0, 1e6)
                        mobility_wat = np.clip(mobility_wat, 0, 1e6)
                        
                        total_mobility = mobility_oil + mobility_wat
                        
                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                        total_mobility = np.where(total_mobility == 0, 1e-10, total_mobility)
                        plot_data['f_o'] = mobility_oil / total_mobility
                        plot_data['f_w'] = 1 - plot_data['f_o']
                        
                        # –ó–∞–º–µ–Ω—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ NaN
                        plot_data = plot_data.replace([np.inf, -np.inf], np.nan)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—á—ë—Ç–æ–≤
                        plot_data = plot_data.dropna(subset=['f_o','fill_cb_res', 'KVS_fin', 'KPR_cb', 'f_w'])
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
                        st.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(plot_data)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω –≥–ª—É–±–∏–Ω—ã: {plot_data['DEPTH'].min():.1f} - {plot_data['DEPTH'].max():.1f} –º)")
                        
                        # ========================================
                        # –ì–†–ê–§–ò–ö –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ò–ë–´–õ–ò –ü–û –ì–õ–£–ë–ò–ù–ï
                        # ========================================
                        
                        st.subheader("üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –≥–ª—É–±–∏–Ω–µ")
                        
                        with st.spinner("üîÑ –†–∞—Å—á—ë—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏..."):
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–±–∏—Ç—ã –¥–ª—è plot_data (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã)
                            if 'Q_total' not in plot_data.columns:
                                k_ro_vals = plot_data['k_ro']
                                k_rw_vals = plot_data['k_rw']
                                
                                plot_data['Q_total'] = (
                                    (2 * np.pi * plot_data["KPR_cb"] * h * (P_res - P_well)) /
                                    (B * np.log(r_e / r_w))
                                ) * (k_ro_vals / mu_o + k_rw_vals / mu_w)
                                
                                plot_data['Q_oil'] = plot_data['Q_total'] * plot_data['f_o']
                                plot_data['Q_wat'] = plot_data['Q_total'] * (1 - plot_data['f_o'])
                            
                            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
                            profit_results = []
                            window_sizes_min_viz = window_min * 10
                            window_sizes_max_viz = window_max * 10
                            
                            # –ë–µ—Ä—ë–º –∫–∞–∂–¥–æ–µ 5-–µ –æ–∫–Ω–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–µ–Ω—å—à–µ –ª–∏–Ω–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ)
                            for window in range(window_sizes_min_viz, window_sizes_max_viz + 1, 50):
                                # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –¥–ª—è –í–°–ï–• –ø–æ–∑–∏—Ü–∏–π —Å—Ä–∞–∑—É
                                rolling_oil = plot_data['Q_oil'].rolling(window=window).sum() / reculc
                                rolling_wat = plot_data['Q_wat'].rolling(window=window).sum() / reculc
                                rolling_total = plot_data['Q_total'].rolling(window=window).sum() / reculc
                                
                                # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞
                                revenues = prise_oil * rolling_oil
                                ndpis = ndpi_rate * revenues
                                costs = prise_w * rolling_wat + opex_liquid * rolling_total
                                profits = revenues - ndpis - costs
                                
                                # –ë–µ—Ä—ë–º –∫–∞–∂–¥—É—é 10-—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                                for i in range(window-1, len(plot_data), 10):
                                    if not pd.isna(profits.iloc[i]):
                                        profit_results.append({
                                            'window_m': window / 10,
                                            'depth_start': plot_data.iloc[i - window + 1]['DEPTH'],
                                            'profit': profits.iloc[i]
                                        })
                            
                            # –°–æ–∑–¥–∞—ë–º DataFrame
                            df_profit = pd.DataFrame(profit_results)
                            
                            # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
                            fig_profit = go.Figure()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
                            for window_m in sorted(df_profit['window_m'].unique()):
                                df_subset = df_profit[df_profit['window_m'] == window_m]
                                fig_profit.add_trace(go.Scatter(
                                    x=df_subset['depth_start'],
                                    y=df_subset['profit'],
                                    mode='lines',
                                    name=f'{window_m:.0f} –º',
                                    opacity=0.7,
                                    line=dict(width=2)
                                ))
                            
                            # –û—Ç–º–µ—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                            fig_profit.add_trace(go.Scatter(
                                x=[result['depth_start']],
                                y=[result['profit']],
                                mode='markers',
                                marker=dict(size=15, color='red', symbol='star', line=dict(width=2, color='white')),
                                name='–û–ø—Ç–∏–º—É–º',
                                showlegend=True
                            ))
                            
                            fig_profit.update_layout(
                                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –≥–ª—É–±–∏–Ω–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω',
                                xaxis_title='–ì–ª—É–±–∏–Ω–∞ –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –º',
                                yaxis_title='–ü—Ä–∏–±—ã–ª—å, —Ä—É–±',
                                height=600,
                                showlegend=True,
                                hovermode='x unified',
                                xaxis=dict(showgrid=True, gridwidth=1, gridcolor='lightgray'),
                                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='lightgray')
                            )
                            
                            st.plotly_chart(fig_profit, use_container_width=True)
                            
                            # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", f"{df_profit['profit'].max():,.0f} —Ä—É–±")
                            with col2:
                                st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", f"{df_profit['profit'].min():,.0f} —Ä—É–±")
                            with col3:
                                st.metric("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", f"{df_profit['profit'].mean():,.0f} —Ä—É–±")
                        
                        # ========================================
                        # –ü–û–°–¢–†–û–ï–ù–ò–ï –ì–†–ê–§–ò–ö–û–í –ù–ê –û–°–ù–û–í–ï –ï–î–ò–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê
                        # ========================================
                        
                        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Å–∫–≤–∞–∂–∏–Ω—ã")
                        
                        fig = make_subplots(
                            rows=1, cols=3,
                            subplot_titles=('–ü—Ä–æ—Ñ–∏–ª—å —Å–∫–≤–∞–∂–∏–Ω—ã', '–§–∞–∑–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏', '–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å'),
                            specs=[[{"secondary_y": True}, {"secondary_y": False}, {"secondary_y": False}]]
                        )
                        
                        # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ—Ñ–∏–ª—å —Å–∫–≤–∞–∂–∏–Ω—ã
                        fig.add_trace(
                            go.Scatter(
                                x=plot_data['fill_cb_res'].values,
                                y=plot_data['DEPTH'].values,
                                mode='lines',
                                name='–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å',
                                line=dict(color='blue', width=2)
                            ),
                            row=1, col=1
                        )
                        
                        fig.add_trace(
                            go.Scatter(
                                x=plot_data['KVS_fin'].values,
                                y=plot_data['DEPTH'].values,
                                mode='lines',
                                name='–ö–í–°',
                                line=dict(color='red', width=2),
                                yaxis='y2'
                            ),
                            row=1, col=1, secondary_y=True
                        )
                        
                        # –ì—Ä–∞—Ñ–∏–∫ 2: –§–∞–∑–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ (–∑–∞–ª–∏–≤–∫–∞ –¥–ª—è –Ω–µ—Ñ—Ç–∏)
                        fig.add_trace(
                            go.Scatter(
                                x=plot_data['f_o'].values,
                                y=plot_data['DEPTH'].values,
                                #fill='tozerox',
                                fillcolor='rgba(139, 69, 19, 0.5)',
                                line=dict(color='rgba(139, 69, 19, 0.8)', width=2),
                                name='–î–æ–ª—è –Ω–µ—Ñ—Ç–∏',
                                mode='lines'
                            ),
                            row=1, col=2
                        )
                        
                        # –ó–∞–ª–∏–≤–∫–∞ –¥–ª—è –≤–æ–¥—ã (—Å–∏–Ω–∏–º) - –æ—Ç f_o –¥–æ 1 (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è)
                        ones_array = np.ones(len(plot_data))
                        fig.add_trace(
                            go.Scatter(
                                x=ones_array,
                                y=plot_data['DEPTH'].values,
                                fill='tonextx',
                                fillcolor='rgba(0, 100, 255, 0.4)',
                                line=dict(color='rgba(0, 100, 255, 0.7)', width=1),
                                name='–î–æ–ª—è –≤–æ–¥—ã',
                                mode='lines'
                            ),
                            row=1, col=2
                        )
                        
                        # –ì—Ä–∞—Ñ–∏–∫ 3: –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)
                        fig.add_trace(
                            go.Scatter(
                                x=plot_data['KPR_cb'].values,
                                y=plot_data['DEPTH'].values,
                                mode='lines',
                                name='–ü—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å',
                                line=dict(color='purple', width=2)
                            ),
                            row=1, col=3
                        )
                        
                        # –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –∑–∞–ª–∏–≤–∫–æ–π
                        optimal_start = result['depth_start']
                        optimal_end = result['depth_end']
                        
                        # –ó–∞–ª–∏–≤–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –∏ —Ç—Ä–µ—Ç—å–µ–º –≥—Ä–∞—Ñ–∏–∫–∞—Ö
                        fig.add_hrect(
                            y0=optimal_start, y1=optimal_end,
                            fillcolor="yellow", opacity=0.4,
                            layer="below", line_width=2,
                            line_color="orange",
                            annotation_text="–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                            annotation_position="top left",
                            row=1, col=1
                        )
                        
                        fig.add_hrect(
                            y0=optimal_start, y1=optimal_end,
                            fillcolor="yellow", opacity=0.4,
                            layer="below", line_width=2,
                            line_color="orange",
                            annotation_text="–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                            annotation_position="top left",
                            row=1, col=3
                        )
                        
                        fig.update_layout(
                            height=800,
                            title_text="–ê–Ω–∞–ª–∏–∑ —Å–∫–≤–∞–∂–∏–Ω—ã",
                            showlegend=True
                        )
                        
                        # –û–±—Ä–∞—Ç–Ω–∞—è —à–∫–∞–ª–∞ –≥–ª—É–±–∏–Ω—ã (–≥–ª—É–±–∏–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–Ω–∏–∑)
                        fig.update_xaxes(title_text="–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å", row=1, col=1)
                        fig.update_yaxes(
                            title_text="–ì–ª—É–±–∏–Ω–∞ (–º)", 
                            row=1, col=1, 
                            autorange="reversed",
                            dtick=10,  # –¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–æ–≤
                            showgrid=True,
                            gridwidth=1,
                            gridcolor="lightgray"
                        )
                        fig.update_xaxes(title_text="–§–∞–∑–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏", row=1, col=2)
                        fig.update_yaxes(
                            title_text="–ì–ª—É–±–∏–Ω–∞ (–º)", 
                            row=1, col=2, 
                            autorange="reversed",
                            dtick=10,  # –¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–æ–≤
                            showgrid=True,
                            gridwidth=1,
                            gridcolor="lightgray"
                        )
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–º –º–∞—Å—à—Ç–∞–±–µ)
                        fig.update_xaxes(
                            title_text="–ü—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å, –º¬≤", 
                            row=1, col=3,
                            type="log",  # –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞
                            showgrid=True,
                            gridwidth=1,
                            gridcolor="lightgray"
                        )
                        fig.update_yaxes(
                            title_text="–ì–ª—É–±–∏–Ω–∞ (–º)", 
                            row=1, col=3, 
                            autorange="reversed",
                            dtick=10,  # –¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–æ–≤
                            showgrid=True,
                            gridwidth=1,
                            gridcolor="lightgray"
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                
                with tab2:
                    st.header("üí∞ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å –∏ –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
                    st.markdown("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if st.session_state.results_loss is None:
                        st.warning("‚ö†Ô∏è –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å'** –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ—Ä—å")
                    else:
                        result_loss = st.session_state.results_loss
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric(
                                "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–±—ã–ª—å",
                                f"{result_loss['fact_profit']:,.0f} —Ä—É–±" if result_loss['fact_profit'] else "N/A",
                                delta=None
                            )
                        
                        with col2:
                            st.metric(
                                "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
                                f"{result_loss['optimal_profit']:,.0f} —Ä—É–±",
                                delta=None
                            )
                        
                        with col3:
                            st.metric(
                                "–ù–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
                                f"{result_loss['loss']:,.0f} —Ä—É–±" if result_loss['loss'] else "N/A",
                                delta=f"-{result_loss['loss']:,.0f} —Ä—É–±" if result_loss['loss'] and result_loss['loss'] > 0 else None
                            )
                        
                        with col4:
                            st.metric(
                                "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞",
                                f"{result_loss['reculc']:.3f}",
                                delta=None
                            )
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:**")
                            st.write(f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {fact_start_depth}‚Äì{fact_end_depth} –º")
                            st.write(f"‚Ä¢ –î–µ–±–∏—Ç: {fact_q} –º¬≥/—Å—É—Ç")
                            st.write(f"‚Ä¢ –û–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å: {fact_wc:.1%}")
                            st.write(f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {fact_time} —Å—É—Ç–æ–∫")
                            st.write(f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {result_loss['fact_profit']:,.0f} —Ä—É–±" if result_loss['fact_profit'] else "‚Ä¢ –ü—Ä–∏–±—ã–ª—å: N/A")
                        
                        with col2:
                            st.markdown("**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):**")
                            st.write(f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {result_loss['optimal_interval'][0]:.1f}‚Äì{result_loss['optimal_interval'][1]:.1f} –º")
                            st.write(f"‚Ä¢ –î–ª–∏–Ω–∞ –æ–∫–Ω–∞: {result_loss['optimal_window_m']:.1f} –º")
                            st.write(f"‚Ä¢ –î–æ–±—ã—á–∞ –Ω–µ—Ñ—Ç–∏: {result_loss['optimal_Q_oil']:.2f} –º¬≥/—Å—É—Ç")
                            st.write(f"‚Ä¢ –î–æ–±—ã—á–∞ –≤–æ–¥—ã: {result_loss['optimal_Q_wat']:.2f} –º¬≥/—Å—É—Ç")
                            st.write(f"‚Ä¢ –û–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å: {result_loss['optimal_Q_wat']/(result_loss['optimal_Q_oil']+result_loss['optimal_Q_wat'])*100:.1f}%")
                            st.write(f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {result_loss['optimal_profit']:,.0f} —Ä—É–± –∑–∞ {fact_time} —Å—É—Ç")
                            st.write(f"‚Ä¢ –ü–æ—Ç–µ—Ä–∏: {result_loss['loss']:,.0f} —Ä—É–±" if result_loss['loss'] else "‚Ä¢ –ü–æ—Ç–µ—Ä–∏: N/A")
                            
                            st.markdown("**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –º–æ–¥–µ–ª–∏:**")
                            st.write(f"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ—Ñ—Ç–∏: {result_loss['oil_correction']:.3f}")
                            st.write(f"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–æ–¥—ã: {result_loss['wat_correction']:.3f}")
                            
                            if abs(result_loss['oil_correction'] - 1) > 0.1 or abs(result_loss['wat_correction'] - 1) > 0.1:
                                st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –ø–æ –æ–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç–∏")
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        st.subheader("üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                        fact_q_oil = fact_q * (1 - fact_wc)
                        fact_q_wat = fact_q * fact_wc
                        fact_revenue = prise_oil * fact_q_oil * fact_time
                        fact_ndpi = ndpi_rate * fact_revenue
                        fact_costs = prise_w * fact_q_wat * fact_time + opex_liquid * fact_q * fact_time
                        fact_profit_calc = fact_revenue - fact_ndpi - fact_costs
                        
                        # –ë–∞—Ä—á–∞—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ –∏–∑ result_loss —É–∂–µ –∑–∞ –≥–æ–¥)
                        metrics = ['–ü—Ä–∏–±—ã–ª—å', '–í—ã—Ä—É—á–∫–∞', '–ù–î–ü–ò', '–ó–∞—Ç—Ä–∞—Ç—ã']
                        fact_values = [fact_profit_calc, fact_revenue, fact_ndpi, fact_costs]
                        opt_values = [result_loss['optimal_profit'], 
                                     result_loss['optimal_revenue'],
                                     result_loss['optimal_ndpi'],
                                     result_loss['optimal_costs']]
                        
                        fig_comp = go.Figure(data=[
                            go.Bar(name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π', x=metrics, y=fact_values, 
                                  marker_color='rgba(255, 0, 0, 0.7)',
                                  text=[f'{v/1000:.0f}k' for v in fact_values],
                                  textposition='outside'),
                            go.Bar(name='–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π', x=metrics, y=opt_values, 
                                  marker_color='rgba(0, 200, 0, 0.7)',
                                  text=[f'{v/1000:.0f}k' for v in opt_values],
                                  textposition='outside')
                        ])
                        
                        fig_comp.update_layout(
                            title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (–∑–∞ –≥–æ–¥)',
                            yaxis_title='–†—É–±',
                            barmode='group',
                            height=600,
                            showlegend=True,
                            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='lightgray')
                        )
                        
                        st.plotly_chart(fig_comp, use_container_width=True)
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –ø—Ä–∏—Ä–æ—Å—Ç–µ
                        if fact_profit_calc > 0:
                            potential_gain = result_loss['optimal_profit'] - fact_profit_calc
                            gain_percentage = (potential_gain / fact_profit_calc) * 100
                            
                            if potential_gain > 0:
                                st.success(f"üí∞ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏:** {potential_gain:,.0f} —Ä—É–± –∑–∞ {fact_time} —Å—É—Ç (+{gain_percentage:.1f}%)")
                            else:
                                st.info(f"‚ÑπÔ∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–ª–∏–∑–æ–∫ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                        st.markdown("### üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
                        comparison_df = pd.DataFrame({
                            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': metrics,
                            '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π': [f'{v:,.0f}' for v in fact_values],
                            '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π': [f'{v:,.0f}' for v in opt_values],
                            '–†–∞–∑–Ω–∏—Ü–∞': [f'{opt_values[i] - fact_values[i]:,.0f}' for i in range(len(metrics))],
                            '–ü—Ä–∏—Ä–æ—Å—Ç, %': [f'{(opt_values[i] / fact_values[i] - 1) * 100:.1f}%' if fact_values[i] != 0 else 'N/A' for i in range(len(metrics))]
                        })
                        st.dataframe(comparison_df, use_container_width=True, hide_index=True)
                        
                        # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                        if result_loss['fact_profit'] and result_loss['loss']:
                            st.subheader("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å")
                            
                            loss_percentage = (result_loss['loss'] / result_loss['fact_profit']) * 100 if result_loss['fact_profit'] > 0 else 0
                            
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric(
                                    "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å",
                                    f"{loss_percentage:.1f}%",
                                    delta=f"-{loss_percentage:.1f}%"
                                )
                            
                            with col2:
                                st.metric(
                                    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞",
                                    f"{((result_loss['optimal_profit'] / result_loss['fact_profit']) - 1) * 100:.1f}%",
                                    delta=f"+{((result_loss['optimal_profit'] / result_loss['fact_profit']) - 1) * 100:.1f}%"
                                )
                            
                            with col3:
                                st.metric(
                                    "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                                    f"{(result_loss['fact_profit'] / result_loss['optimal_profit']) * 100:.1f}%",
                                    delta=f"-{(1 - result_loss['fact_profit'] / result_loss['optimal_profit']) * 100:.1f}%"
                                )
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

else:
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫–≤–∞–∂–∏–Ω –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã
    st.sidebar.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã")
    
    st.markdown("""
    ### üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
    
    –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
    - `well` - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã
    - `DEPTH` - –≥–ª—É–±–∏–Ω–∞ (–º)
    - `fill_cb_res` - –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    - `KVS_fin` - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏—è –Ω–µ—Ñ—Ç–∏ –≤–æ–¥–æ–π
    - `KPR_cb` - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å (–º¬≤)
    
    ### üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    - **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤** - –ø–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    - **üí∞ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å** - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è** - –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–≤–∞–∂–∏–Ω—ã –∏ —Ñ–∞–∑–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    - **–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏, –∑–∞—Ç—Ä–∞—Ç –∏ –Ω–∞–ª–æ–≥–æ–≤
    
    ### üõ¢Ô∏è –í—ã–±–æ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã
    
    –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–∫–≤–∞–∂–∏–Ω–∞–º–∏ –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üõ¢Ô∏è **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω**")
