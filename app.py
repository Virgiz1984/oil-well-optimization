import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏—è —Å–∫–≤–∞–∂–∏–Ω",
    page_icon="üõ¢Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üõ¢Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω")
st.markdown("---")

# –§—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ Jupyter notebook)
def optimize_interval(
    df, 
    well_name,
    mu_o=0.43,  # –≤—è–∑–∫–æ—Å—Ç—å –Ω–µ—Ñ—Ç–∏, –ü–∞¬∑—Å
    mu_w=0.33,  # –≤—è–∑–∫–æ—Å—Ç—å –≤–æ–¥—ã, –ü–∞¬∑—Å
    P_res=30 * 1.013e5,  # –ø–ª–∞—Å—Ç–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –ü–∞
    P_well=20 * 1.013e5, # –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—å–µ, –ü–∞
    r_w=0.1,             # —Ä–∞–¥–∏—É—Å —Å–∫–≤–∞–∂–∏–Ω—ã, –º
    r_e=500,             # —Ä–∞–¥–∏—É—Å –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –º
    h=0.1,               # —Ç–æ–ª—â–∏–Ω–∞ –ø–ª–∞—Å—Ç–∞, –º
    Soi=0.28,            # –æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –Ω–µ—Ñ—Ç–µ—ë–º–∫–æ—Å—Ç—å
    B=1.2,               # –æ–±—ä–µ–º–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    prise_oil=15000,     # —Ü–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏, —Ä—É–±/–º3
    prise_w=800,         # —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥—ã, —Ä—É–±/–º3
    opex_liquid=250,     # OPEX –Ω–∞ –∂–∏–¥–∫–æ—Å—Ç—å, —Ä—É–±/–º3
    ndpi_rate=0.01,      # –ù–î–ü–ò –æ—Ç –≤—ã—Ä—É—á–∫–∏
    reculc=351182.040,      # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    window_sizes_min_m=4,
    window_sizes_max_m=35
):
    """
    –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ø–æ –ø—Ä–∏–±—ã–ª–∏
    """
    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–≤–∞–∂–∏–Ω–µ
    well = df[df.well == well_name].copy()

    # —Ñ–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    well['o'] = (well['fill_cb_res'] * (1 - well['KVS_fin']) - Soi) / mu_o
    well['o'] = np.clip(well['o'], 0, 1)
    o = well['o']
    kv = 1 - well['fill_cb_res'] * (1 - well['KVS_fin'])
    w = (kv - well['KVS_fin']) / mu_w

    well['f_o'] = o / (o + w)
    well['Q_total'] = (
        (2 * np.pi * well["KVS_fin"] * h * (P_res - P_well)) /
        (B * np.log(r_e / r_w))
    )
    well['Q_oil'] = well['Q_total'] * well['f_o']
    well['Q_wat'] = well['Q_total'] * (1 - well['f_o'])

    # –ø–µ—Ä–µ–≤–æ–¥ –º–µ—Ç—Ä–æ–≤ –≤ —Ç–æ—á–∫–∏ (—à–∞–≥ 0.1 –º ‚Üí —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10)
    window_sizes_min = window_sizes_min_m * 10
    window_sizes_max = window_sizes_max_m * 10

    best_window = None
    best_start = None
    best_metric = -np.inf
    best_result = {}

    for window in range(window_sizes_min, window_sizes_max + 1):
        for start in range(0, len(well) - window + 1):
            end = start + window
            df_window = well.iloc[start:end]

            # –≤—ã—Ä—É—á–∫–∞
            revenue = prise_oil * df_window['Q_oil'].sum() / reculc
            # –Ω–∞–ª–æ–≥
            ndpi = ndpi_rate * revenue
            # –∑–∞—Ç—Ä–∞—Ç—ã (–≤–æ–¥–∞ + –ø–æ–¥—ä—ë–º –∂–∏–¥–∫–æ—Å—Ç–∏)
            costs = (
                prise_w * df_window['Q_wat'].sum() / reculc +
                opex_liquid * df_window['Q_total'].sum() / reculc
            )
            # —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
            profit = revenue - ndpi - costs

            if profit > best_metric:
                best_metric = profit
                best_window = window
                best_start = start
                best_result = {
                    'revenue': revenue,
                    'ndpi': ndpi,
                    'costs': costs,
                    'profit': profit,
                    'Q_oil': df_window['Q_oil'].sum() / reculc,
                    'Q_wat': df_window['Q_wat'].sum() / reculc,
                    'depth_start': df_window.iloc[0]['DEPTH'],
                    'depth_end': df_window.iloc[-1]['DEPTH'],
                    'window_m': window / 10
                }

    return best_result

def optimize_interval_with_loss(
    df, well_name,
    mu_o=0.43, mu_w=0.33,
    P_res=30*1.013e5, P_well=20*1.013e5,
    r_w=0.1, r_e=500, h=0.1, Soi=0.28, B=1.2,
    prise_oil=15000, prise_w=800,
    window_sizes_min_m=4, window_sizes_max_m=35,
    fact_start_depth=None, fact_end_depth=None,
    fact_q=None, fact_wc=None, fact_time=None
):
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏.
    """
    well = df[df.well == well_name].reset_index(drop=True)

    # --- —Ä–∞—Å—á—ë—Ç —Ñ–∞–∑–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ ---
    well['o'] = (well['fill_cb_res'] * (1 - well['KVS_fin']) - Soi) / mu_o
    well['o'] = np.clip(well['o'], 0, 1)
    o = well['o']
    kv = 1 - well['fill_cb_res'] * (1 - well['KVS_fin'])
    w = (kv - well['KVS_fin']) / mu_w

    well['f_o'] = o / (o + w)
    well['Q_total'] = (2 * np.pi * well["KVS_fin"] * h * (P_res - P_well)) / (B * np.log(r_e / r_w))
    well['Q_oil'] = well['Q_total'] * well['f_o']
    well['Q_wat'] = well['Q_total'] * (1 - well['f_o'])

    # --- 1. –ü–æ–¥–≥–æ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ recalc –ø–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ---
    if fact_start_depth is not None and fact_end_depth is not None and fact_q is not None:
        fact_window = well[(well['DEPTH'] >= fact_start_depth) & (well['DEPTH'] <= fact_end_depth)]
        if len(fact_window) == 0:
            raise ValueError("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

        model_q = fact_window['Q_oil'].sum() + fact_window['Q_wat'].sum()
        reculc = model_q / fact_q if fact_q > 0 else 1.0
    else:
        reculc = 1.0

    # --- 2. –ü—Ä–∏–±—ã–ª—å –ø–æ —Ñ–∞–∫—Ç—É ---
    if fact_q is not None and fact_wc is not None and fact_time is not None:
        fact_q_oil = fact_q * (1 - fact_wc)
        fact_q_wat = fact_q * fact_wc
        fact_profit = (prise_oil * fact_q_oil - prise_w * fact_q_wat) * fact_time
    else:
        fact_profit = None

    # --- 3. –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ---
    window_sizes = range(window_sizes_min_m*10, window_sizes_max_m*10)
    best = {"profit": -np.inf}

    for window in window_sizes:
        for start in range(0, len(well) - window + 1):
            end = start + window
            df_window = well.iloc[start:end]

            Q_oil_sum = df_window['Q_oil'].sum() / reculc
            Q_wat_sum = df_window['Q_wat'].sum() / reculc
            profit = (prise_oil * Q_oil_sum - prise_w * Q_wat_sum) * fact_time

            if profit > best["profit"]:
                best = {
                    "profit": profit,
                    "window": window,
                    "start": start,
                    "end": end,
                    "Q_oil_sum": Q_oil_sum,
                    "Q_wat_sum": Q_wat_sum,
                    "start_depth": df_window.iloc[0]['DEPTH'],
                    "end_depth": df_window.iloc[-1]['DEPTH']
                }

    # --- 4. –°—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å ---
    if fact_profit is not None:
        loss = best["profit"] - fact_profit
    else:
        loss = None

    return {
        "fact_profit": fact_profit,
        "optimal_profit": best["profit"],
        "loss": loss,
        "optimal_interval": (best["start_depth"], best["end_depth"]),
        "optimal_window_m": best["window"]/10,
        "reculc": reculc
    }

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
uploaded_file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫–≤–∞–∂–∏–Ω",
    type=['xlsx', 'xls'],
    help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: well, DEPTH, fill_cb_res, KVS_fin"
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã
st.sidebar.subheader("üõ¢Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã")
# well_name –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

# –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("üî¨ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
mu_o = st.sidebar.slider("–í—è–∑–∫–æ—Å—Ç—å –Ω–µ—Ñ—Ç–∏ (–ü–∞¬∑—Å)", 0.1, 1.0, 0.43, 0.01)
mu_w = st.sidebar.slider("–í—è–∑–∫–æ—Å—Ç—å –≤–æ–¥—ã (–ü–∞¬∑—Å)", 0.1, 1.0, 0.33, 0.01)
P_res = st.sidebar.slider("–ü–ª–∞—Å—Ç–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–∞—Ç–º)", 10, 50, 30, 1) * 1.013e5
P_well = st.sidebar.slider("–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—å–µ (–∞—Ç–º)", 5, 30, 20, 1) * 1.013e5
r_w = st.sidebar.slider("–†–∞–¥–∏—É—Å —Å–∫–≤–∞–∂–∏–Ω—ã (–º)", 0.05, 0.2, 0.1, 0.01)
r_e = st.sidebar.slider("–†–∞–¥–∏—É—Å –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–º)", 100, 1000, 500, 10)
h = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ –ø–ª–∞—Å—Ç–∞ (–º)", 0.05, 0.5, 0.1, 0.01)
Soi = st.sidebar.slider("–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –Ω–µ—Ñ—Ç–µ—ë–º–∫–æ—Å—Ç—å", 0.1, 0.5, 0.28, 0.01)
B = st.sidebar.slider("–û–±—ä–µ–º–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", 1.0, 2.0, 1.2, 0.1)

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
prise_oil = st.sidebar.number_input("–¶–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏ (—Ä—É–±/–º¬≥)", 5000, 50000, 15000, 500)
prise_w = st.sidebar.number_input("–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥—ã (—Ä—É–±/–º¬≥)", 100, 2000, 800, 50)
opex_liquid = st.sidebar.number_input("OPEX –Ω–∞ –∂–∏–¥–∫–æ—Å—Ç—å (—Ä—É–±/–º¬≥)", 50, 1000, 250, 25)
ndpi_rate = st.sidebar.slider("–ù–î–ü–ò –æ—Ç –≤—ã—Ä—É—á–∫–∏", 0.0, 0.1, 0.01, 0.001)
reculc = st.sidebar.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞", 100000, 5000000, 351182, 100000)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞
st.sidebar.subheader("üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞")
window_min = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–∫–Ω–∞ (–º)", 1, 20, 4, 1)
window_max = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–∫–Ω–∞ (–º)", 10, 50, 35, 1)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
st.sidebar.subheader("üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ—Ä—å)")
fact_start_depth = st.sidebar.number_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞ –Ω–∞—á–∞–ª–∞ (–º)", 0, 5000, 2828, 1)
fact_end_depth = st.sidebar.number_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞ –∫–æ–Ω—Ü–∞ (–º)", 0, 5000, 2848, 1)
fact_q = st.sidebar.number_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–±–∏—Ç (–º¬≥/—Å—É—Ç)", 0.0, 1000.0, 20.0, 0.1)
fact_wc = st.sidebar.slider("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.7, 0.01)
fact_time = st.sidebar.number_input("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫–≤–∞–∂–∏–Ω—ã (—Å—É—Ç–∫–∏)", 1, 3650, 365, 1)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if uploaded_file is not None:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(uploaded_file)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['well', 'DEPTH', 'fill_cb_res', 'KVS_fin']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            st.info("–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: well, DEPTH, fill_cb_res, KVS_fin")
        else:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω
            available_wells = df['well'].unique()
            
            # –í—ã–±–æ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
            st.sidebar.subheader("üõ¢Ô∏è –í—ã–±–æ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã")
            well_name = st.sidebar.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                options=available_wells,
                index=0 if len(available_wells) > 0 else None,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )
            
            if well_name:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω–µ
                st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω–∞: **{well_name}**")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∫–≤–∞–∂–∏–Ω–µ
                well_data = df[df.well == well_name]
                st.info(f"üìä –î–∞–Ω–Ω—ã–µ —Å–∫–≤–∞–∂–∏–Ω—ã: {len(well_data)} —Ç–æ—á–µ–∫, –≥–ª—É–±–∏–Ω–∞ –æ—Ç {well_data['DEPTH'].min():.1f} –¥–æ {well_data['DEPTH'].max():.1f} –º")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
                tab1, tab2 = st.tabs(["üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", "üí∞ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å"])
                
                with tab1:
                    st.header("üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è")
                    st.markdown("–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è..."):
                        result = optimize_interval(
                            df, well_name,
                            mu_o=mu_o, mu_w=mu_w,
                            P_res=P_res, P_well=P_well,
                            r_w=r_w, r_e=r_e, h=h, Soi=Soi, B=B,
                            prise_oil=prise_oil, prise_w=prise_w,
                            opex_liquid=opex_liquid, ndpi_rate=ndpi_rate,
                            reculc=reculc,
                            window_sizes_min_m=window_min,
                            window_sizes_max_m=window_max
                        )
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.success("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric(
                            "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å",
                            f"{result['profit']:,.0f} —Ä—É–±",
                            delta=None
                        )
                    
                    with col2:
                        st.metric(
                            "–î–æ–±—ã—á–∞ –Ω–µ—Ñ—Ç–∏",
                            f"{result['Q_oil']:.2f} –º¬≥",
                            delta=None
                        )
                    
                    with col3:
                        st.metric(
                            "–î–æ–±—ã—á–∞ –≤–æ–¥—ã",
                            f"{result['Q_wat']:.2f} –º¬≥",
                            delta=None
                        )
                    
                    with col4:
                        st.metric(
                            "–î–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞",
                            f"{result['window_m']:.1f} –º",
                            delta=None
                        )
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
                        st.write(f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {result['revenue']:,.2f} —Ä—É–±")
                        st.write(f"‚Ä¢ –ù–î–ü–ò: {result['ndpi']:,.2f} —Ä—É–±")
                        st.write(f"‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã: {result['costs']:,.2f} —Ä—É–±")
                        st.write(f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {result['profit']:,.2f} —Ä—É–±")
                    
                    with col2:
                        st.markdown("**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
                        st.write(f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –Ω–∞—á–∞–ª–∞: {result['depth_start']:.1f} –º")
                        st.write(f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –∫–æ–Ω—Ü–∞: {result['depth_end']:.1f} –º")
                        st.write(f"‚Ä¢ –î–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {result['window_m']:.1f} –º")
                        st.write(f"‚Ä¢ –î–æ–±—ã—á–∞ –Ω–µ—Ñ—Ç–∏: {result['Q_oil']:.2f} –º¬≥")
                        st.write(f"‚Ä¢ –î–æ–±—ã—á–∞ –≤–æ–¥—ã: {result['Q_wat']:.2f} –º¬≥")
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–≤–∞–∂–∏–Ω—ã
                    fig = make_subplots(
                        rows=1, cols=2,
                        subplot_titles=('–ü—Ä–æ—Ñ–∏–ª—å —Å–∫–≤–∞–∂–∏–Ω—ã', '–§–∞–∑–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏'),
                        specs=[[{"secondary_y": True}, {"secondary_y": False}]]
                    )
                    
                    # –ü—Ä–æ—Ñ–∏–ª—å —Å–∫–≤–∞–∂–∏–Ω—ã
                    fig.add_trace(
                        go.Scatter(
                            x=well_data['fill_cb_res'],
                            y=well_data['DEPTH'],
                            mode='lines',
                            name='–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å',
                            line=dict(color='blue', width=2)
                        ),
                        row=1, col=1
                    )
                    
                    fig.add_trace(
                        go.Scatter(
                            x=well_data['KVS_fin'],
                            y=well_data['DEPTH'],
                            mode='lines',
                            name='–ö–í–°',
                            line=dict(color='red', width=2),
                            yaxis='y2'
                        ),
                        row=1, col=1, secondary_y=True
                    )
                    
                    # –§–∞–∑–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
                    well_data = well_data.copy()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    well_data.loc[:, 'o'] = (well_data['fill_cb_res'] * (1 - well_data['KVS_fin']) - Soi) / mu_o
                    well_data.loc[:, 'o'] = np.clip(well_data['o'], 0, 1)
                    o = well_data['o']
                    kv = 1 - well_data['fill_cb_res'] * (1 - well_data['KVS_fin'])
                    w = (kv - well_data['KVS_fin']) / mu_w
                    well_data.loc[:, 'f_o'] = o / (o + w)
                    
                    fig.add_trace(
                        go.Scatter(
                            x=well_data['f_o'],
                            y=well_data['DEPTH'],
                            mode='lines',
                            name='–î–æ–ª—è –Ω–µ—Ñ—Ç–∏',
                            line=dict(color='green', width=2)
                        ),
                        row=1, col=2
                    )
                    
                    # –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –∑–∞–ª–∏–≤–∫–æ–π
                    optimal_start = result['depth_start']
                    optimal_end = result['depth_end']
                    
                    # –ó–∞–ª–∏–≤–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
                    fig.add_hrect(
                        y0=optimal_start, y1=optimal_end,
                        fillcolor="yellow", opacity=0.4,
                        layer="below", line_width=2,
                        line_color="orange",
                        annotation_text="–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                        annotation_position="top left",
                        row=1, col=1
                    )
                    
                    # –ó–∞–ª–∏–≤–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
                    fig.add_hrect(
                        y0=optimal_start, y1=optimal_end,
                        fillcolor="yellow", opacity=0.4,
                        layer="below", line_width=2,
                        line_color="orange",
                        annotation_text="–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                        annotation_position="top left",
                        row=1, col=2
                    )
                    
                    fig.update_layout(
                        height=800,
                        title_text="–ê–Ω–∞–ª–∏–∑ —Å–∫–≤–∞–∂–∏–Ω—ã",
                        showlegend=True
                    )
                    
                    # –û–±—Ä–∞—Ç–Ω–∞—è —à–∫–∞–ª–∞ –≥–ª—É–±–∏–Ω—ã (–≥–ª—É–±–∏–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–Ω–∏–∑)
                    fig.update_xaxes(title_text="–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å", row=1, col=1)
                    fig.update_yaxes(
                        title_text="–ì–ª—É–±–∏–Ω–∞ (–º)", 
                        row=1, col=1, 
                        autorange="reversed",
                        dtick=50,  # –¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 50 –º–µ—Ç—Ä–æ–≤
                        showgrid=True,
                        gridwidth=1,
                        gridcolor="lightgray"
                    )
                    fig.update_xaxes(title_text="–î–æ–ª—è –Ω–µ—Ñ—Ç–∏", row=1, col=2)
                    fig.update_yaxes(
                        title_text="–ì–ª—É–±–∏–Ω–∞ (–º)", 
                        row=1, col=2, 
                        autorange="reversed",
                        dtick=50,  # –¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 50 –º–µ—Ç—Ä–æ–≤
                        showgrid=True,
                        gridwidth=1,
                        gridcolor="lightgray"
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                with tab2:
                    st.header("üí∞ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å –∏ –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
                    st.markdown("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏")
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ—Ä—å
                    with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å..."):
                        result_loss = optimize_interval_with_loss(
                            df, well_name,
                            mu_o=mu_o, mu_w=mu_w,
                            P_res=P_res, P_well=P_well,
                            r_w=r_w, r_e=r_e, h=h, Soi=Soi, B=B,
                            prise_oil=prise_oil, prise_w=prise_w,
                            window_sizes_min_m=window_min, window_sizes_max_m=window_max,
                            fact_start_depth=fact_start_depth, fact_end_depth=fact_end_depth,
                            fact_q=fact_q, fact_wc=fact_wc, fact_time=fact_time
                        )
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric(
                            "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–±—ã–ª—å",
                            f"{result_loss['fact_profit']:,.0f} —Ä—É–±" if result_loss['fact_profit'] else "N/A",
                            delta=None
                        )
                    
                    with col2:
                        st.metric(
                            "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
                            f"{result_loss['optimal_profit']:,.0f} —Ä—É–±",
                            delta=None
                        )
                    
                    with col3:
                        st.metric(
                            "–ù–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
                            f"{result_loss['loss']:,.0f} —Ä—É–±" if result_loss['loss'] else "N/A",
                            delta=f"-{result_loss['loss']:,.0f} —Ä—É–±" if result_loss['loss'] and result_loss['loss'] > 0 else None
                        )
                    
                    with col4:
                        st.metric(
                            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞",
                            f"{result_loss['reculc']:.3f}",
                            delta=None
                        )
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:**")
                        st.write(f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {fact_start_depth}‚Äì{fact_end_depth} –º")
                        st.write(f"‚Ä¢ –î–µ–±–∏—Ç: {fact_q} –º¬≥/—Å—É—Ç")
                        st.write(f"‚Ä¢ –û–±–≤–æ–¥–Ω—ë–Ω–Ω–æ—Å—Ç—å: {fact_wc:.1%}")
                        st.write(f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {fact_time} —Å—É—Ç–æ–∫")
                        st.write(f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {result_loss['fact_profit']:,.0f} —Ä—É–±" if result_loss['fact_profit'] else "‚Ä¢ –ü—Ä–∏–±—ã–ª—å: N/A")
                    
                    with col2:
                        st.markdown("**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
                        st.write(f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {result_loss['optimal_interval'][0]:.1f}‚Äì{result_loss['optimal_interval'][1]:.1f} –º")
                        st.write(f"‚Ä¢ –î–ª–∏–Ω–∞ –æ–∫–Ω–∞: {result_loss['optimal_window_m']:.1f} –º")
                        st.write(f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {result_loss['optimal_profit']:,.0f} —Ä—É–±")
                        st.write(f"‚Ä¢ –ü–æ—Ç–µ—Ä–∏: {result_loss['loss']:,.0f} —Ä—É–±" if result_loss['loss'] else "‚Ä¢ –ü–æ—Ç–µ—Ä–∏: N/A")
                        st.write(f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {result_loss['reculc']:.3f}")
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    st.subheader("üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                    fig_comp = go.Figure()
                    
                    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    fig_comp.add_vrect(
                        x0=0, x1=1,
                        y0=fact_start_depth, y1=fact_end_depth,
                        fillcolor="red", opacity=0.3,
                        layer="below", line_width=2,
                        annotation_text="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                        annotation_position="top right"
                    )
                    
                    # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    fig_comp.add_vrect(
                        x0=0, x1=1,
                        y0=result_loss['optimal_interval'][0], y1=result_loss['optimal_interval'][1],
                        fillcolor="green", opacity=0.3,
                        layer="below", line_width=2,
                        annotation_text="–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                        annotation_position="top left"
                    )
                    
                    # –ü—Ä–æ—Ñ–∏–ª—å —Å–∫–≤–∞–∂–∏–Ω—ã
                    fig_comp.add_trace(
                        go.Scatter(
                            x=well_data['fill_cb_res'],
                            y=well_data['DEPTH'],
                            mode='lines',
                            name='–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å',
                            line=dict(color='blue', width=2)
                        )
                    )
                    
                    fig_comp.update_layout(
                        height=800,
                        title_text="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤",
                        xaxis_title="–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å",
                        yaxis_title="–ì–ª—É–±–∏–Ω–∞ (–º)",
                        showlegend=True
                    )
                    
                    # –û–±—Ä–∞—Ç–Ω–∞—è —à–∫–∞–ª–∞ –≥–ª—É–±–∏–Ω—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
                    fig_comp.update_yaxes(
                        autorange="reversed",
                        dtick=50,  # –¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 50 –º–µ—Ç—Ä–æ–≤
                        showgrid=True,
                        gridwidth=1,
                        gridcolor="lightgray"
                    )
                    
                    st.plotly_chart(fig_comp, use_container_width=True)
                    
                    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                    if result_loss['fact_profit'] and result_loss['loss']:
                        st.subheader("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å")
                        
                        loss_percentage = (result_loss['loss'] / result_loss['fact_profit']) * 100 if result_loss['fact_profit'] > 0 else 0
                        
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric(
                                "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å",
                                f"{loss_percentage:.1f}%",
                                delta=f"-{loss_percentage:.1f}%"
                            )
                        
                        with col2:
                            st.metric(
                                "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞",
                                f"{((result_loss['optimal_profit'] / result_loss['fact_profit']) - 1) * 100:.1f}%",
                                delta=f"+{((result_loss['optimal_profit'] / result_loss['fact_profit']) - 1) * 100:.1f}%"
                            )
                        
                        with col3:
                            st.metric(
                                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                                f"{(result_loss['fact_profit'] / result_loss['optimal_profit']) * 100:.1f}%",
                                delta=f"-{(1 - result_loss['fact_profit'] / result_loss['optimal_profit']) * 100:.1f}%"
                            )
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

else:
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫–≤–∞–∂–∏–Ω –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã
    st.sidebar.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã")
    
    st.markdown("""
    ### üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
    
    –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
    - `well` - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã
    - `DEPTH` - –≥–ª—É–±–∏–Ω–∞ (–º)
    - `fill_cb_res` - –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    - `KVS_fin` - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏—è –Ω–µ—Ñ—Ç–∏ –≤–æ–¥–æ–π
    
    ### üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    - **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤** - –ø–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    - **üí∞ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å** - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è** - –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–≤–∞–∂–∏–Ω—ã –∏ —Ñ–∞–∑–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    - **–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏, –∑–∞—Ç—Ä–∞—Ç –∏ –Ω–∞–ª–æ–≥–æ–≤
    
    ### üõ¢Ô∏è –í—ã–±–æ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã
    
    –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–∫–≤–∞–∂–∏–Ω–∞–º–∏ –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üõ¢Ô∏è **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω**")
